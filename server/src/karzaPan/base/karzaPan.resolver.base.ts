/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateKarzaPanArgs } from "./CreateKarzaPanArgs";
import { UpdateKarzaPanArgs } from "./UpdateKarzaPanArgs";
import { DeleteKarzaPanArgs } from "./DeleteKarzaPanArgs";
import { KarzaPanFindManyArgs } from "./KarzaPanFindManyArgs";
import { KarzaPanFindUniqueArgs } from "./KarzaPanFindUniqueArgs";
import { KarzaPan } from "./KarzaPan";
import { KarzaPanService } from "../karzaPan.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => KarzaPan)
export class KarzaPanResolverBase {
  constructor(
    protected readonly service: KarzaPanService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "KarzaPan",
    action: "read",
    possession: "any",
  })
  async _karzaPansMeta(
    @graphql.Args() args: KarzaPanFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [KarzaPan])
  @nestAccessControl.UseRoles({
    resource: "KarzaPan",
    action: "read",
    possession: "any",
  })
  async karzaPans(
    @graphql.Args() args: KarzaPanFindManyArgs
  ): Promise<KarzaPan[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => KarzaPan, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "KarzaPan",
    action: "read",
    possession: "own",
  })
  async karzaPan(
    @graphql.Args() args: KarzaPanFindUniqueArgs
  ): Promise<KarzaPan | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KarzaPan)
  @nestAccessControl.UseRoles({
    resource: "KarzaPan",
    action: "create",
    possession: "any",
  })
  async createKarzaPan(
    @graphql.Args() args: CreateKarzaPanArgs
  ): Promise<KarzaPan> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KarzaPan)
  @nestAccessControl.UseRoles({
    resource: "KarzaPan",
    action: "update",
    possession: "any",
  })
  async updateKarzaPan(
    @graphql.Args() args: UpdateKarzaPanArgs
  ): Promise<KarzaPan | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KarzaPan)
  @nestAccessControl.UseRoles({
    resource: "KarzaPan",
    action: "delete",
    possession: "any",
  })
  async deleteKarzaPan(
    @graphql.Args() args: DeleteKarzaPanArgs
  ): Promise<KarzaPan | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
