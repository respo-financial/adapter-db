/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHyperVergeKycSuccessArgs } from "./CreateHyperVergeKycSuccessArgs";
import { UpdateHyperVergeKycSuccessArgs } from "./UpdateHyperVergeKycSuccessArgs";
import { DeleteHyperVergeKycSuccessArgs } from "./DeleteHyperVergeKycSuccessArgs";
import { HyperVergeKycSuccessFindManyArgs } from "./HyperVergeKycSuccessFindManyArgs";
import { HyperVergeKycSuccessFindUniqueArgs } from "./HyperVergeKycSuccessFindUniqueArgs";
import { HyperVergeKycSuccess } from "./HyperVergeKycSuccess";
import { HyperVergeKycSuccessService } from "../hyperVergeKycSuccess.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HyperVergeKycSuccess)
export class HyperVergeKycSuccessResolverBase {
  constructor(
    protected readonly service: HyperVergeKycSuccessService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeKycSuccess",
    action: "read",
    possession: "any",
  })
  async _hyperVergeKycSuccessesMeta(
    @graphql.Args() args: HyperVergeKycSuccessFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HyperVergeKycSuccess])
  @nestAccessControl.UseRoles({
    resource: "HyperVergeKycSuccess",
    action: "read",
    possession: "any",
  })
  async hyperVergeKycSuccesses(
    @graphql.Args() args: HyperVergeKycSuccessFindManyArgs
  ): Promise<HyperVergeKycSuccess[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HyperVergeKycSuccess, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HyperVergeKycSuccess",
    action: "read",
    possession: "own",
  })
  async hyperVergeKycSuccess(
    @graphql.Args() args: HyperVergeKycSuccessFindUniqueArgs
  ): Promise<HyperVergeKycSuccess | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HyperVergeKycSuccess)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeKycSuccess",
    action: "create",
    possession: "any",
  })
  async createHyperVergeKycSuccess(
    @graphql.Args() args: CreateHyperVergeKycSuccessArgs
  ): Promise<HyperVergeKycSuccess> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HyperVergeKycSuccess)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeKycSuccess",
    action: "update",
    possession: "any",
  })
  async updateHyperVergeKycSuccess(
    @graphql.Args() args: UpdateHyperVergeKycSuccessArgs
  ): Promise<HyperVergeKycSuccess | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HyperVergeKycSuccess)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeKycSuccess",
    action: "delete",
    possession: "any",
  })
  async deleteHyperVergeKycSuccess(
    @graphql.Args() args: DeleteHyperVergeKycSuccessArgs
  ): Promise<HyperVergeKycSuccess | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
