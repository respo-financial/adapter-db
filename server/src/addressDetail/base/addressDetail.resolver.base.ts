/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateAddressDetailArgs } from "./CreateAddressDetailArgs";
import { UpdateAddressDetailArgs } from "./UpdateAddressDetailArgs";
import { DeleteAddressDetailArgs } from "./DeleteAddressDetailArgs";
import { AddressDetailFindManyArgs } from "./AddressDetailFindManyArgs";
import { AddressDetailFindUniqueArgs } from "./AddressDetailFindUniqueArgs";
import { AddressDetail } from "./AddressDetail";
import { UserDetail } from "../../userDetail/base/UserDetail";
import { AddressDetailService } from "../addressDetail.service";
@graphql.Resolver(() => AddressDetail)
export class AddressDetailResolverBase {
  constructor(protected readonly service: AddressDetailService) {}

  async _addressDetailsMeta(
    @graphql.Args() args: AddressDetailFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [AddressDetail])
  async addressDetails(
    @graphql.Args() args: AddressDetailFindManyArgs
  ): Promise<AddressDetail[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => AddressDetail, { nullable: true })
  async addressDetail(
    @graphql.Args() args: AddressDetailFindUniqueArgs
  ): Promise<AddressDetail | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AddressDetail)
  async createAddressDetail(
    @graphql.Args() args: CreateAddressDetailArgs
  ): Promise<AddressDetail> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        userDetail: args.data.userDetail
          ? {
              connect: args.data.userDetail,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AddressDetail)
  async updateAddressDetail(
    @graphql.Args() args: UpdateAddressDetailArgs
  ): Promise<AddressDetail | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          userDetail: args.data.userDetail
            ? {
                connect: args.data.userDetail,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AddressDetail)
  async deleteAddressDetail(
    @graphql.Args() args: DeleteAddressDetailArgs
  ): Promise<AddressDetail | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UserDetail, { nullable: true })
  async userDetail(
    @graphql.Parent() parent: AddressDetail
  ): Promise<UserDetail | null> {
    const result = await this.service.getUserDetail(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
