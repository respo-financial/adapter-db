/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateKarzaAdhaarVerifyArgs } from "./CreateKarzaAdhaarVerifyArgs";
import { UpdateKarzaAdhaarVerifyArgs } from "./UpdateKarzaAdhaarVerifyArgs";
import { DeleteKarzaAdhaarVerifyArgs } from "./DeleteKarzaAdhaarVerifyArgs";
import { KarzaAdhaarVerifyFindManyArgs } from "./KarzaAdhaarVerifyFindManyArgs";
import { KarzaAdhaarVerifyFindUniqueArgs } from "./KarzaAdhaarVerifyFindUniqueArgs";
import { KarzaAdhaarVerify } from "./KarzaAdhaarVerify";
import { KarzaAdhaarVerifyService } from "../karzaAdhaarVerify.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => KarzaAdhaarVerify)
export class KarzaAdhaarVerifyResolverBase {
  constructor(
    protected readonly service: KarzaAdhaarVerifyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "KarzaAdhaarVerify",
    action: "read",
    possession: "any",
  })
  async _karzaAdhaarVerifiesMeta(
    @graphql.Args() args: KarzaAdhaarVerifyFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [KarzaAdhaarVerify])
  @nestAccessControl.UseRoles({
    resource: "KarzaAdhaarVerify",
    action: "read",
    possession: "any",
  })
  async karzaAdhaarVerifies(
    @graphql.Args() args: KarzaAdhaarVerifyFindManyArgs
  ): Promise<KarzaAdhaarVerify[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => KarzaAdhaarVerify, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "KarzaAdhaarVerify",
    action: "read",
    possession: "own",
  })
  async karzaAdhaarVerify(
    @graphql.Args() args: KarzaAdhaarVerifyFindUniqueArgs
  ): Promise<KarzaAdhaarVerify | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KarzaAdhaarVerify)
  @nestAccessControl.UseRoles({
    resource: "KarzaAdhaarVerify",
    action: "create",
    possession: "any",
  })
  async createKarzaAdhaarVerify(
    @graphql.Args() args: CreateKarzaAdhaarVerifyArgs
  ): Promise<KarzaAdhaarVerify> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KarzaAdhaarVerify)
  @nestAccessControl.UseRoles({
    resource: "KarzaAdhaarVerify",
    action: "update",
    possession: "any",
  })
  async updateKarzaAdhaarVerify(
    @graphql.Args() args: UpdateKarzaAdhaarVerifyArgs
  ): Promise<KarzaAdhaarVerify | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KarzaAdhaarVerify)
  @nestAccessControl.UseRoles({
    resource: "KarzaAdhaarVerify",
    action: "delete",
    possession: "any",
  })
  async deleteKarzaAdhaarVerify(
    @graphql.Args() args: DeleteKarzaAdhaarVerifyArgs
  ): Promise<KarzaAdhaarVerify | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
