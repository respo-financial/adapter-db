/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateKnowlarityMakeCallArgs } from "./CreateKnowlarityMakeCallArgs";
import { UpdateKnowlarityMakeCallArgs } from "./UpdateKnowlarityMakeCallArgs";
import { DeleteKnowlarityMakeCallArgs } from "./DeleteKnowlarityMakeCallArgs";
import { KnowlarityMakeCallFindManyArgs } from "./KnowlarityMakeCallFindManyArgs";
import { KnowlarityMakeCallFindUniqueArgs } from "./KnowlarityMakeCallFindUniqueArgs";
import { KnowlarityMakeCall } from "./KnowlarityMakeCall";
import { KnowlarityMakeCallService } from "../knowlarityMakeCall.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => KnowlarityMakeCall)
export class KnowlarityMakeCallResolverBase {
  constructor(
    protected readonly service: KnowlarityMakeCallService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "KnowlarityMakeCall",
    action: "read",
    possession: "any",
  })
  async _knowlarityMakeCallsMeta(
    @graphql.Args() args: KnowlarityMakeCallFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [KnowlarityMakeCall])
  @nestAccessControl.UseRoles({
    resource: "KnowlarityMakeCall",
    action: "read",
    possession: "any",
  })
  async knowlarityMakeCalls(
    @graphql.Args() args: KnowlarityMakeCallFindManyArgs
  ): Promise<KnowlarityMakeCall[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => KnowlarityMakeCall, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "KnowlarityMakeCall",
    action: "read",
    possession: "own",
  })
  async knowlarityMakeCall(
    @graphql.Args() args: KnowlarityMakeCallFindUniqueArgs
  ): Promise<KnowlarityMakeCall | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KnowlarityMakeCall)
  @nestAccessControl.UseRoles({
    resource: "KnowlarityMakeCall",
    action: "create",
    possession: "any",
  })
  async createKnowlarityMakeCall(
    @graphql.Args() args: CreateKnowlarityMakeCallArgs
  ): Promise<KnowlarityMakeCall> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KnowlarityMakeCall)
  @nestAccessControl.UseRoles({
    resource: "KnowlarityMakeCall",
    action: "update",
    possession: "any",
  })
  async updateKnowlarityMakeCall(
    @graphql.Args() args: UpdateKnowlarityMakeCallArgs
  ): Promise<KnowlarityMakeCall | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KnowlarityMakeCall)
  @nestAccessControl.UseRoles({
    resource: "KnowlarityMakeCall",
    action: "delete",
    possession: "any",
  })
  async deleteKnowlarityMakeCall(
    @graphql.Args() args: DeleteKnowlarityMakeCallArgs
  ): Promise<KnowlarityMakeCall | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
