/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCreditBureauDetailArgs } from "./CreateCreditBureauDetailArgs";
import { UpdateCreditBureauDetailArgs } from "./UpdateCreditBureauDetailArgs";
import { DeleteCreditBureauDetailArgs } from "./DeleteCreditBureauDetailArgs";
import { CreditBureauDetailFindManyArgs } from "./CreditBureauDetailFindManyArgs";
import { CreditBureauDetailFindUniqueArgs } from "./CreditBureauDetailFindUniqueArgs";
import { CreditBureauDetail } from "./CreditBureauDetail";
import { UserDetail } from "../../userDetail/base/UserDetail";
import { CreditBureauDetailService } from "../creditBureauDetail.service";
@graphql.Resolver(() => CreditBureauDetail)
export class CreditBureauDetailResolverBase {
  constructor(protected readonly service: CreditBureauDetailService) {}

  async _creditBureauDetailsMeta(
    @graphql.Args() args: CreditBureauDetailFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [CreditBureauDetail])
  async creditBureauDetails(
    @graphql.Args() args: CreditBureauDetailFindManyArgs
  ): Promise<CreditBureauDetail[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => CreditBureauDetail, { nullable: true })
  async creditBureauDetail(
    @graphql.Args() args: CreditBureauDetailFindUniqueArgs
  ): Promise<CreditBureauDetail | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CreditBureauDetail)
  async createCreditBureauDetail(
    @graphql.Args() args: CreateCreditBureauDetailArgs
  ): Promise<CreditBureauDetail> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        userDetail: args.data.userDetail
          ? {
              connect: args.data.userDetail,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CreditBureauDetail)
  async updateCreditBureauDetail(
    @graphql.Args() args: UpdateCreditBureauDetailArgs
  ): Promise<CreditBureauDetail | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          userDetail: args.data.userDetail
            ? {
                connect: args.data.userDetail,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreditBureauDetail)
  async deleteCreditBureauDetail(
    @graphql.Args() args: DeleteCreditBureauDetailArgs
  ): Promise<CreditBureauDetail | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UserDetail, { nullable: true })
  async userDetail(
    @graphql.Parent() parent: CreditBureauDetail
  ): Promise<UserDetail | null> {
    const result = await this.service.getUserDetail(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
