/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateKarzaEmploymentArgs } from "./CreateKarzaEmploymentArgs";
import { UpdateKarzaEmploymentArgs } from "./UpdateKarzaEmploymentArgs";
import { DeleteKarzaEmploymentArgs } from "./DeleteKarzaEmploymentArgs";
import { KarzaEmploymentFindManyArgs } from "./KarzaEmploymentFindManyArgs";
import { KarzaEmploymentFindUniqueArgs } from "./KarzaEmploymentFindUniqueArgs";
import { KarzaEmployment } from "./KarzaEmployment";
import { KarzaEmploymentService } from "../karzaEmployment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => KarzaEmployment)
export class KarzaEmploymentResolverBase {
  constructor(
    protected readonly service: KarzaEmploymentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "KarzaEmployment",
    action: "read",
    possession: "any",
  })
  async _karzaEmploymentsMeta(
    @graphql.Args() args: KarzaEmploymentFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [KarzaEmployment])
  @nestAccessControl.UseRoles({
    resource: "KarzaEmployment",
    action: "read",
    possession: "any",
  })
  async karzaEmployments(
    @graphql.Args() args: KarzaEmploymentFindManyArgs
  ): Promise<KarzaEmployment[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => KarzaEmployment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "KarzaEmployment",
    action: "read",
    possession: "own",
  })
  async karzaEmployment(
    @graphql.Args() args: KarzaEmploymentFindUniqueArgs
  ): Promise<KarzaEmployment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KarzaEmployment)
  @nestAccessControl.UseRoles({
    resource: "KarzaEmployment",
    action: "create",
    possession: "any",
  })
  async createKarzaEmployment(
    @graphql.Args() args: CreateKarzaEmploymentArgs
  ): Promise<KarzaEmployment> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KarzaEmployment)
  @nestAccessControl.UseRoles({
    resource: "KarzaEmployment",
    action: "update",
    possession: "any",
  })
  async updateKarzaEmployment(
    @graphql.Args() args: UpdateKarzaEmploymentArgs
  ): Promise<KarzaEmployment | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KarzaEmployment)
  @nestAccessControl.UseRoles({
    resource: "KarzaEmployment",
    action: "delete",
    possession: "any",
  })
  async deleteKarzaEmployment(
    @graphql.Args() args: DeleteKarzaEmploymentArgs
  ): Promise<KarzaEmployment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
