/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateKarzaVerifyAdhaarArgs } from "./CreateKarzaVerifyAdhaarArgs";
import { UpdateKarzaVerifyAdhaarArgs } from "./UpdateKarzaVerifyAdhaarArgs";
import { DeleteKarzaVerifyAdhaarArgs } from "./DeleteKarzaVerifyAdhaarArgs";
import { KarzaVerifyAdhaarFindManyArgs } from "./KarzaVerifyAdhaarFindManyArgs";
import { KarzaVerifyAdhaarFindUniqueArgs } from "./KarzaVerifyAdhaarFindUniqueArgs";
import { KarzaVerifyAdhaar } from "./KarzaVerifyAdhaar";
import { KarzaVerifyAdhaarService } from "../karzaVerifyAdhaar.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => KarzaVerifyAdhaar)
export class KarzaVerifyAdhaarResolverBase {
  constructor(
    protected readonly service: KarzaVerifyAdhaarService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "KarzaVerifyAdhaar",
    action: "read",
    possession: "any",
  })
  async _karzaVerifyAdhaarsMeta(
    @graphql.Args() args: KarzaVerifyAdhaarFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [KarzaVerifyAdhaar])
  @nestAccessControl.UseRoles({
    resource: "KarzaVerifyAdhaar",
    action: "read",
    possession: "any",
  })
  async karzaVerifyAdhaars(
    @graphql.Args() args: KarzaVerifyAdhaarFindManyArgs
  ): Promise<KarzaVerifyAdhaar[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => KarzaVerifyAdhaar, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "KarzaVerifyAdhaar",
    action: "read",
    possession: "own",
  })
  async karzaVerifyAdhaar(
    @graphql.Args() args: KarzaVerifyAdhaarFindUniqueArgs
  ): Promise<KarzaVerifyAdhaar | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KarzaVerifyAdhaar)
  @nestAccessControl.UseRoles({
    resource: "KarzaVerifyAdhaar",
    action: "create",
    possession: "any",
  })
  async createKarzaVerifyAdhaar(
    @graphql.Args() args: CreateKarzaVerifyAdhaarArgs
  ): Promise<KarzaVerifyAdhaar> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KarzaVerifyAdhaar)
  @nestAccessControl.UseRoles({
    resource: "KarzaVerifyAdhaar",
    action: "update",
    possession: "any",
  })
  async updateKarzaVerifyAdhaar(
    @graphql.Args() args: UpdateKarzaVerifyAdhaarArgs
  ): Promise<KarzaVerifyAdhaar | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KarzaVerifyAdhaar)
  @nestAccessControl.UseRoles({
    resource: "KarzaVerifyAdhaar",
    action: "delete",
    possession: "any",
  })
  async deleteKarzaVerifyAdhaar(
    @graphql.Args() args: DeleteKarzaVerifyAdhaarArgs
  ): Promise<KarzaVerifyAdhaar | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
