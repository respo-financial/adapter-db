/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHyperVergeAadhaarArgs } from "./CreateHyperVergeAadhaarArgs";
import { UpdateHyperVergeAadhaarArgs } from "./UpdateHyperVergeAadhaarArgs";
import { DeleteHyperVergeAadhaarArgs } from "./DeleteHyperVergeAadhaarArgs";
import { HyperVergeAadhaarFindManyArgs } from "./HyperVergeAadhaarFindManyArgs";
import { HyperVergeAadhaarFindUniqueArgs } from "./HyperVergeAadhaarFindUniqueArgs";
import { HyperVergeAadhaar } from "./HyperVergeAadhaar";
import { HyperVergeAadhaarService } from "../hyperVergeAadhaar.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HyperVergeAadhaar)
export class HyperVergeAadhaarResolverBase {
  constructor(
    protected readonly service: HyperVergeAadhaarService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeAadhaar",
    action: "read",
    possession: "any",
  })
  async _hyperVergeAadhaarsMeta(
    @graphql.Args() args: HyperVergeAadhaarFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HyperVergeAadhaar])
  @nestAccessControl.UseRoles({
    resource: "HyperVergeAadhaar",
    action: "read",
    possession: "any",
  })
  async hyperVergeAadhaars(
    @graphql.Args() args: HyperVergeAadhaarFindManyArgs
  ): Promise<HyperVergeAadhaar[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HyperVergeAadhaar, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HyperVergeAadhaar",
    action: "read",
    possession: "own",
  })
  async hyperVergeAadhaar(
    @graphql.Args() args: HyperVergeAadhaarFindUniqueArgs
  ): Promise<HyperVergeAadhaar | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HyperVergeAadhaar)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeAadhaar",
    action: "create",
    possession: "any",
  })
  async createHyperVergeAadhaar(
    @graphql.Args() args: CreateHyperVergeAadhaarArgs
  ): Promise<HyperVergeAadhaar> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HyperVergeAadhaar)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeAadhaar",
    action: "update",
    possession: "any",
  })
  async updateHyperVergeAadhaar(
    @graphql.Args() args: UpdateHyperVergeAadhaarArgs
  ): Promise<HyperVergeAadhaar | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HyperVergeAadhaar)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeAadhaar",
    action: "delete",
    possession: "any",
  })
  async deleteHyperVergeAadhaar(
    @graphql.Args() args: DeleteHyperVergeAadhaarArgs
  ): Promise<HyperVergeAadhaar | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
