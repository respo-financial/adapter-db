/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHyperVergeOtpArgs } from "./CreateHyperVergeOtpArgs";
import { UpdateHyperVergeOtpArgs } from "./UpdateHyperVergeOtpArgs";
import { DeleteHyperVergeOtpArgs } from "./DeleteHyperVergeOtpArgs";
import { HyperVergeOtpFindManyArgs } from "./HyperVergeOtpFindManyArgs";
import { HyperVergeOtpFindUniqueArgs } from "./HyperVergeOtpFindUniqueArgs";
import { HyperVergeOtp } from "./HyperVergeOtp";
import { HyperVergeOtpService } from "../hyperVergeOtp.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HyperVergeOtp)
export class HyperVergeOtpResolverBase {
  constructor(
    protected readonly service: HyperVergeOtpService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeOtp",
    action: "read",
    possession: "any",
  })
  async _hyperVergeOtpsMeta(
    @graphql.Args() args: HyperVergeOtpFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HyperVergeOtp])
  @nestAccessControl.UseRoles({
    resource: "HyperVergeOtp",
    action: "read",
    possession: "any",
  })
  async hyperVergeOtps(
    @graphql.Args() args: HyperVergeOtpFindManyArgs
  ): Promise<HyperVergeOtp[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HyperVergeOtp, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HyperVergeOtp",
    action: "read",
    possession: "own",
  })
  async hyperVergeOtp(
    @graphql.Args() args: HyperVergeOtpFindUniqueArgs
  ): Promise<HyperVergeOtp | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HyperVergeOtp)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeOtp",
    action: "create",
    possession: "any",
  })
  async createHyperVergeOtp(
    @graphql.Args() args: CreateHyperVergeOtpArgs
  ): Promise<HyperVergeOtp> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HyperVergeOtp)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeOtp",
    action: "update",
    possession: "any",
  })
  async updateHyperVergeOtp(
    @graphql.Args() args: UpdateHyperVergeOtpArgs
  ): Promise<HyperVergeOtp | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HyperVergeOtp)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeOtp",
    action: "delete",
    possession: "any",
  })
  async deleteHyperVergeOtp(
    @graphql.Args() args: DeleteHyperVergeOtpArgs
  ): Promise<HyperVergeOtp | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
