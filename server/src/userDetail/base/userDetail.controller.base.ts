/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserDetailService } from "../userDetail.service";
import { UserDetailCreateInput } from "./UserDetailCreateInput";
import { UserDetailWhereInput } from "./UserDetailWhereInput";
import { UserDetailWhereUniqueInput } from "./UserDetailWhereUniqueInput";
import { UserDetailFindManyArgs } from "./UserDetailFindManyArgs";
import { UserDetailUpdateInput } from "./UserDetailUpdateInput";
import { UserDetail } from "./UserDetail";
import { CreditBureauDetailFindManyArgs } from "../../creditBureauDetail/base/CreditBureauDetailFindManyArgs";
import { CreditBureauDetail } from "../../creditBureauDetail/base/CreditBureauDetail";
import { CreditBureauDetailWhereUniqueInput } from "../../creditBureauDetail/base/CreditBureauDetailWhereUniqueInput";
import { AddressDetailFindManyArgs } from "../../addressDetail/base/AddressDetailFindManyArgs";
import { AddressDetail } from "../../addressDetail/base/AddressDetail";
import { AddressDetailWhereUniqueInput } from "../../addressDetail/base/AddressDetailWhereUniqueInput";
import { EmploymentDetailFindManyArgs } from "../../employmentDetail/base/EmploymentDetailFindManyArgs";
import { EmploymentDetail } from "../../employmentDetail/base/EmploymentDetail";
import { EmploymentDetailWhereUniqueInput } from "../../employmentDetail/base/EmploymentDetailWhereUniqueInput";

export class UserDetailControllerBase {
  constructor(protected readonly service: UserDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserDetail })
  async create(
    @common.Body() data: UserDetailCreateInput
  ): Promise<UserDetail> {
    return await this.service.create({
      data: {
        ...data,

        userOnboardingState: data.userOnboardingState
          ? {
              connect: data.userOnboardingState,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        isPersonalEmailVerified: true,
        mobileNumber: true,
        userProvidedFirstName: true,
        userProvidedLastName: true,
        aadhaarName: true,
        aadhaarDob: true,
        panName: true,
        pan: true,
        panDob: true,
        firstName: true,
        lastName: true,
        personalEmail: true,

        userOnboardingState: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserDetail] })
  @ApiNestedQuery(UserDetailFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<UserDetail[]> {
    const args = plainToClass(UserDetailFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        isPersonalEmailVerified: true,
        mobileNumber: true,
        userProvidedFirstName: true,
        userProvidedLastName: true,
        aadhaarName: true,
        aadhaarDob: true,
        panName: true,
        pan: true,
        panDob: true,
        firstName: true,
        lastName: true,
        personalEmail: true,

        userOnboardingState: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: UserDetailWhereUniqueInput
  ): Promise<UserDetail | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        isPersonalEmailVerified: true,
        mobileNumber: true,
        userProvidedFirstName: true,
        userProvidedLastName: true,
        aadhaarName: true,
        aadhaarDob: true,
        panName: true,
        pan: true,
        panDob: true,
        firstName: true,
        lastName: true,
        personalEmail: true,

        userOnboardingState: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: UserDetailWhereUniqueInput,
    @common.Body() data: UserDetailUpdateInput
  ): Promise<UserDetail | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          userOnboardingState: data.userOnboardingState
            ? {
                connect: data.userOnboardingState,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          userId: true,
          isPersonalEmailVerified: true,
          mobileNumber: true,
          userProvidedFirstName: true,
          userProvidedLastName: true,
          aadhaarName: true,
          aadhaarDob: true,
          panName: true,
          pan: true,
          panDob: true,
          firstName: true,
          lastName: true,
          personalEmail: true,

          userOnboardingState: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: UserDetailWhereUniqueInput
  ): Promise<UserDetail | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          userId: true,
          isPersonalEmailVerified: true,
          mobileNumber: true,
          userProvidedFirstName: true,
          userProvidedLastName: true,
          aadhaarName: true,
          aadhaarDob: true,
          panName: true,
          pan: true,
          panDob: true,
          firstName: true,
          lastName: true,
          personalEmail: true,

          userOnboardingState: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/creditBureauDetails")
  @ApiNestedQuery(CreditBureauDetailFindManyArgs)
  async findManyCreditBureauDetails(
    @common.Req() request: Request,
    @common.Param() params: UserDetailWhereUniqueInput
  ): Promise<CreditBureauDetail[]> {
    const query = plainToClass(CreditBureauDetailFindManyArgs, request.query);
    const results = await this.service.findCreditBureauDetails(params.id, {
      ...query,
      select: {
        provider: true,
        cbReportFileName: true,
        createdAt: true,
        updatedAt: true,
        id: true,
        reportPullDate: true,
        cbUserId: true,

        userDetail: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/creditBureauDetails")
  async connectCreditBureauDetails(
    @common.Param() params: UserDetailWhereUniqueInput,
    @common.Body() body: CreditBureauDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creditBureauDetails: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/creditBureauDetails")
  async updateCreditBureauDetails(
    @common.Param() params: UserDetailWhereUniqueInput,
    @common.Body() body: CreditBureauDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creditBureauDetails: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/creditBureauDetails")
  async disconnectCreditBureauDetails(
    @common.Param() params: UserDetailWhereUniqueInput,
    @common.Body() body: CreditBureauDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creditBureauDetails: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/addressDetails")
  @ApiNestedQuery(AddressDetailFindManyArgs)
  async findManyAddressDetails(
    @common.Req() request: Request,
    @common.Param() params: UserDetailWhereUniqueInput
  ): Promise<AddressDetail[]> {
    const query = plainToClass(AddressDetailFindManyArgs, request.query);
    const results = await this.service.findAddressDetails(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        inBlacklistedRegion: true,
        state: true,
        country: true,
        latitude: true,
        longitude: true,

        userDetail: {
          select: {
            id: true,
          },
        },

        pincode: true,
        addressType: true,
        city: true,
        addressLine: true,
        inApprovedRegion: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/addressDetails")
  async connectAddressDetails(
    @common.Param() params: UserDetailWhereUniqueInput,
    @common.Body() body: AddressDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      addressDetails: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/addressDetails")
  async updateAddressDetails(
    @common.Param() params: UserDetailWhereUniqueInput,
    @common.Body() body: AddressDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      addressDetails: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/addressDetails")
  async disconnectAddressDetails(
    @common.Param() params: UserDetailWhereUniqueInput,
    @common.Body() body: AddressDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      addressDetails: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employmentDetails")
  @ApiNestedQuery(EmploymentDetailFindManyArgs)
  async findManyEmploymentDetails(
    @common.Req() request: Request,
    @common.Param() params: UserDetailWhereUniqueInput
  ): Promise<EmploymentDetail[]> {
    const query = plainToClass(EmploymentDetailFindManyArgs, request.query);
    const results = await this.service.findEmploymentDetails(params.id, {
      ...query,
      select: {
        employmentVerificationProvider: true,
        isEmploymentEmailValid: true,
        employmentVerificationStatus: true,
        email: true,
        id: true,
        createdAt: true,
        updatedAt: true,
        companyName: true,
        isOthers: true,

        userDetail: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employmentDetails")
  async connectEmploymentDetails(
    @common.Param() params: UserDetailWhereUniqueInput,
    @common.Body() body: EmploymentDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employmentDetails: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employmentDetails")
  async updateEmploymentDetails(
    @common.Param() params: UserDetailWhereUniqueInput,
    @common.Body() body: EmploymentDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employmentDetails: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employmentDetails")
  async disconnectEmploymentDetails(
    @common.Param() params: UserDetailWhereUniqueInput,
    @common.Body() body: EmploymentDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employmentDetails: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
