/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateUserDetailArgs } from "./CreateUserDetailArgs";
import { UpdateUserDetailArgs } from "./UpdateUserDetailArgs";
import { DeleteUserDetailArgs } from "./DeleteUserDetailArgs";
import { UserDetailFindManyArgs } from "./UserDetailFindManyArgs";
import { UserDetailFindUniqueArgs } from "./UserDetailFindUniqueArgs";
import { UserDetail } from "./UserDetail";
import { CreditBureauDetailFindManyArgs } from "../../creditBureauDetail/base/CreditBureauDetailFindManyArgs";
import { CreditBureauDetail } from "../../creditBureauDetail/base/CreditBureauDetail";
import { AddressDetailFindManyArgs } from "../../addressDetail/base/AddressDetailFindManyArgs";
import { AddressDetail } from "../../addressDetail/base/AddressDetail";
import { EmploymentDetailFindManyArgs } from "../../employmentDetail/base/EmploymentDetailFindManyArgs";
import { EmploymentDetail } from "../../employmentDetail/base/EmploymentDetail";
import { UserOnboardingState } from "../../userOnboardingState/base/UserOnboardingState";
import { UserDetailService } from "../userDetail.service";
@graphql.Resolver(() => UserDetail)
export class UserDetailResolverBase {
  constructor(protected readonly service: UserDetailService) {}

  async _userDetailsMeta(
    @graphql.Args() args: UserDetailFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [UserDetail])
  async userDetails(
    @graphql.Args() args: UserDetailFindManyArgs
  ): Promise<UserDetail[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => UserDetail, { nullable: true })
  async userDetail(
    @graphql.Args() args: UserDetailFindUniqueArgs
  ): Promise<UserDetail | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserDetail)
  async createUserDetail(
    @graphql.Args() args: CreateUserDetailArgs
  ): Promise<UserDetail> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        userOnboardingState: args.data.userOnboardingState
          ? {
              connect: args.data.userOnboardingState,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserDetail)
  async updateUserDetail(
    @graphql.Args() args: UpdateUserDetailArgs
  ): Promise<UserDetail | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          userOnboardingState: args.data.userOnboardingState
            ? {
                connect: args.data.userOnboardingState,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserDetail)
  async deleteUserDetail(
    @graphql.Args() args: DeleteUserDetailArgs
  ): Promise<UserDetail | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CreditBureauDetail])
  async creditBureauDetails(
    @graphql.Parent() parent: UserDetail,
    @graphql.Args() args: CreditBureauDetailFindManyArgs
  ): Promise<CreditBureauDetail[]> {
    const results = await this.service.findCreditBureauDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [AddressDetail])
  async addressDetails(
    @graphql.Parent() parent: UserDetail,
    @graphql.Args() args: AddressDetailFindManyArgs
  ): Promise<AddressDetail[]> {
    const results = await this.service.findAddressDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmploymentDetail])
  async employmentDetails(
    @graphql.Parent() parent: UserDetail,
    @graphql.Args() args: EmploymentDetailFindManyArgs
  ): Promise<EmploymentDetail[]> {
    const results = await this.service.findEmploymentDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => UserOnboardingState, { nullable: true })
  async userOnboardingState(
    @graphql.Parent() parent: UserDetail
  ): Promise<UserOnboardingState | null> {
    const result = await this.service.getUserOnboardingState(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
