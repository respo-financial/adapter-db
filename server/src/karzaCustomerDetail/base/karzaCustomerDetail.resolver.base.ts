/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateKarzaCustomerDetailArgs } from "./CreateKarzaCustomerDetailArgs";
import { UpdateKarzaCustomerDetailArgs } from "./UpdateKarzaCustomerDetailArgs";
import { DeleteKarzaCustomerDetailArgs } from "./DeleteKarzaCustomerDetailArgs";
import { KarzaCustomerDetailFindManyArgs } from "./KarzaCustomerDetailFindManyArgs";
import { KarzaCustomerDetailFindUniqueArgs } from "./KarzaCustomerDetailFindUniqueArgs";
import { KarzaCustomerDetail } from "./KarzaCustomerDetail";
import { KarzaCustomerDetailService } from "../karzaCustomerDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => KarzaCustomerDetail)
export class KarzaCustomerDetailResolverBase {
  constructor(
    protected readonly service: KarzaCustomerDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "KarzaCustomerDetail",
    action: "read",
    possession: "any",
  })
  async _karzaCustomerDetailsMeta(
    @graphql.Args() args: KarzaCustomerDetailFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [KarzaCustomerDetail])
  @nestAccessControl.UseRoles({
    resource: "KarzaCustomerDetail",
    action: "read",
    possession: "any",
  })
  async karzaCustomerDetails(
    @graphql.Args() args: KarzaCustomerDetailFindManyArgs
  ): Promise<KarzaCustomerDetail[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => KarzaCustomerDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "KarzaCustomerDetail",
    action: "read",
    possession: "own",
  })
  async karzaCustomerDetail(
    @graphql.Args() args: KarzaCustomerDetailFindUniqueArgs
  ): Promise<KarzaCustomerDetail | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KarzaCustomerDetail)
  @nestAccessControl.UseRoles({
    resource: "KarzaCustomerDetail",
    action: "create",
    possession: "any",
  })
  async createKarzaCustomerDetail(
    @graphql.Args() args: CreateKarzaCustomerDetailArgs
  ): Promise<KarzaCustomerDetail> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KarzaCustomerDetail)
  @nestAccessControl.UseRoles({
    resource: "KarzaCustomerDetail",
    action: "update",
    possession: "any",
  })
  async updateKarzaCustomerDetail(
    @graphql.Args() args: UpdateKarzaCustomerDetailArgs
  ): Promise<KarzaCustomerDetail | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KarzaCustomerDetail)
  @nestAccessControl.UseRoles({
    resource: "KarzaCustomerDetail",
    action: "delete",
    possession: "any",
  })
  async deleteKarzaCustomerDetail(
    @graphql.Args() args: DeleteKarzaCustomerDetailArgs
  ): Promise<KarzaCustomerDetail | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
