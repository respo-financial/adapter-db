/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHyperVergeKycFailureHistoryArgs } from "./CreateHyperVergeKycFailureHistoryArgs";
import { UpdateHyperVergeKycFailureHistoryArgs } from "./UpdateHyperVergeKycFailureHistoryArgs";
import { DeleteHyperVergeKycFailureHistoryArgs } from "./DeleteHyperVergeKycFailureHistoryArgs";
import { HyperVergeKycFailureHistoryFindManyArgs } from "./HyperVergeKycFailureHistoryFindManyArgs";
import { HyperVergeKycFailureHistoryFindUniqueArgs } from "./HyperVergeKycFailureHistoryFindUniqueArgs";
import { HyperVergeKycFailureHistory } from "./HyperVergeKycFailureHistory";
import { HyperVergeKycFailureHistoryService } from "../hyperVergeKycFailureHistory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HyperVergeKycFailureHistory)
export class HyperVergeKycFailureHistoryResolverBase {
  constructor(
    protected readonly service: HyperVergeKycFailureHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeKycFailureHistory",
    action: "read",
    possession: "any",
  })
  async _hyperVergeKycFailureHistoriesMeta(
    @graphql.Args() args: HyperVergeKycFailureHistoryFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HyperVergeKycFailureHistory])
  @nestAccessControl.UseRoles({
    resource: "HyperVergeKycFailureHistory",
    action: "read",
    possession: "any",
  })
  async hyperVergeKycFailureHistories(
    @graphql.Args() args: HyperVergeKycFailureHistoryFindManyArgs
  ): Promise<HyperVergeKycFailureHistory[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HyperVergeKycFailureHistory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HyperVergeKycFailureHistory",
    action: "read",
    possession: "own",
  })
  async hyperVergeKycFailureHistory(
    @graphql.Args() args: HyperVergeKycFailureHistoryFindUniqueArgs
  ): Promise<HyperVergeKycFailureHistory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HyperVergeKycFailureHistory)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeKycFailureHistory",
    action: "create",
    possession: "any",
  })
  async createHyperVergeKycFailureHistory(
    @graphql.Args() args: CreateHyperVergeKycFailureHistoryArgs
  ): Promise<HyperVergeKycFailureHistory> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HyperVergeKycFailureHistory)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeKycFailureHistory",
    action: "update",
    possession: "any",
  })
  async updateHyperVergeKycFailureHistory(
    @graphql.Args() args: UpdateHyperVergeKycFailureHistoryArgs
  ): Promise<HyperVergeKycFailureHistory | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HyperVergeKycFailureHistory)
  @nestAccessControl.UseRoles({
    resource: "HyperVergeKycFailureHistory",
    action: "delete",
    possession: "any",
  })
  async deleteHyperVergeKycFailureHistory(
    @graphql.Args() args: DeleteHyperVergeKycFailureHistoryArgs
  ): Promise<HyperVergeKycFailureHistory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
