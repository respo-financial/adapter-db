/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserOnboardingStateService } from "../userOnboardingState.service";
import { UserOnboardingStateCreateInput } from "./UserOnboardingStateCreateInput";
import { UserOnboardingStateWhereInput } from "./UserOnboardingStateWhereInput";
import { UserOnboardingStateWhereUniqueInput } from "./UserOnboardingStateWhereUniqueInput";
import { UserOnboardingStateFindManyArgs } from "./UserOnboardingStateFindManyArgs";
import { UserOnboardingStateUpdateInput } from "./UserOnboardingStateUpdateInput";
import { UserOnboardingState } from "./UserOnboardingState";
import { UserDetailFindManyArgs } from "../../userDetail/base/UserDetailFindManyArgs";
import { UserDetail } from "../../userDetail/base/UserDetail";
import { UserDetailWhereUniqueInput } from "../../userDetail/base/UserDetailWhereUniqueInput";

export class UserOnboardingStateControllerBase {
  constructor(protected readonly service: UserOnboardingStateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserOnboardingState })
  async create(
    @common.Body() data: UserOnboardingStateCreateInput
  ): Promise<UserOnboardingState> {
    return await this.service.create({
      data: data,
      select: {
        isUserProvidedNameValid: true,
        id: true,
        createdAt: true,
        updatedAt: true,
        employmentType: true,
        isEmploymentEmailValidated: true,
        apNameMatchStatus: true,
        isAddressValid: true,
        dobMatchStatus: true,
        inApprovedRegion: true,
        inBlacklistedRegion: true,
        isPennytransferSuccess: true,
        isEnachCreated: true,
        isSelfieMatchSuccess: true,
        isLoanAgreementSigned: true,
        isCbSuccess: true,
        isPanValid: true,
        l1Status: true,
        l2Status: true,
        combinedStatus: true,
        isPersonalEmailVerified: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserOnboardingState] })
  @ApiNestedQuery(UserOnboardingStateFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<UserOnboardingState[]> {
    const args = plainToClass(UserOnboardingStateFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        isUserProvidedNameValid: true,
        id: true,
        createdAt: true,
        updatedAt: true,
        employmentType: true,
        isEmploymentEmailValidated: true,
        apNameMatchStatus: true,
        isAddressValid: true,
        dobMatchStatus: true,
        inApprovedRegion: true,
        inBlacklistedRegion: true,
        isPennytransferSuccess: true,
        isEnachCreated: true,
        isSelfieMatchSuccess: true,
        isLoanAgreementSigned: true,
        isCbSuccess: true,
        isPanValid: true,
        l1Status: true,
        l2Status: true,
        combinedStatus: true,
        isPersonalEmailVerified: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserOnboardingState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: UserOnboardingStateWhereUniqueInput
  ): Promise<UserOnboardingState | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        isUserProvidedNameValid: true,
        id: true,
        createdAt: true,
        updatedAt: true,
        employmentType: true,
        isEmploymentEmailValidated: true,
        apNameMatchStatus: true,
        isAddressValid: true,
        dobMatchStatus: true,
        inApprovedRegion: true,
        inBlacklistedRegion: true,
        isPennytransferSuccess: true,
        isEnachCreated: true,
        isSelfieMatchSuccess: true,
        isLoanAgreementSigned: true,
        isCbSuccess: true,
        isPanValid: true,
        l1Status: true,
        l2Status: true,
        combinedStatus: true,
        isPersonalEmailVerified: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserOnboardingState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: UserOnboardingStateWhereUniqueInput,
    @common.Body() data: UserOnboardingStateUpdateInput
  ): Promise<UserOnboardingState | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          isUserProvidedNameValid: true,
          id: true,
          createdAt: true,
          updatedAt: true,
          employmentType: true,
          isEmploymentEmailValidated: true,
          apNameMatchStatus: true,
          isAddressValid: true,
          dobMatchStatus: true,
          inApprovedRegion: true,
          inBlacklistedRegion: true,
          isPennytransferSuccess: true,
          isEnachCreated: true,
          isSelfieMatchSuccess: true,
          isLoanAgreementSigned: true,
          isCbSuccess: true,
          isPanValid: true,
          l1Status: true,
          l2Status: true,
          combinedStatus: true,
          isPersonalEmailVerified: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserOnboardingState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: UserOnboardingStateWhereUniqueInput
  ): Promise<UserOnboardingState | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          isUserProvidedNameValid: true,
          id: true,
          createdAt: true,
          updatedAt: true,
          employmentType: true,
          isEmploymentEmailValidated: true,
          apNameMatchStatus: true,
          isAddressValid: true,
          dobMatchStatus: true,
          inApprovedRegion: true,
          inBlacklistedRegion: true,
          isPennytransferSuccess: true,
          isEnachCreated: true,
          isSelfieMatchSuccess: true,
          isLoanAgreementSigned: true,
          isCbSuccess: true,
          isPanValid: true,
          l1Status: true,
          l2Status: true,
          combinedStatus: true,
          isPersonalEmailVerified: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/userDetails")
  @ApiNestedQuery(UserDetailFindManyArgs)
  async findManyUserDetails(
    @common.Req() request: Request,
    @common.Param() params: UserOnboardingStateWhereUniqueInput
  ): Promise<UserDetail[]> {
    const query = plainToClass(UserDetailFindManyArgs, request.query);
    const results = await this.service.findUserDetails(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        isPersonalEmailVerified: true,
        mobileNumber: true,
        userProvidedFirstName: true,
        userProvidedLastName: true,
        aadhaarName: true,
        aadhaarDob: true,
        panName: true,
        pan: true,
        panDob: true,
        firstName: true,
        lastName: true,
        personalEmail: true,

        userOnboardingState: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userDetails")
  async connectUserDetails(
    @common.Param() params: UserOnboardingStateWhereUniqueInput,
    @common.Body() body: UserDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userDetails: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userDetails")
  async updateUserDetails(
    @common.Param() params: UserOnboardingStateWhereUniqueInput,
    @common.Body() body: UserDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userDetails: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userDetails")
  async disconnectUserDetails(
    @common.Param() params: UserOnboardingStateWhereUniqueInput,
    @common.Body() body: UserDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userDetails: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
