/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateUserOnboardingStateArgs } from "./CreateUserOnboardingStateArgs";
import { UpdateUserOnboardingStateArgs } from "./UpdateUserOnboardingStateArgs";
import { DeleteUserOnboardingStateArgs } from "./DeleteUserOnboardingStateArgs";
import { UserOnboardingStateFindManyArgs } from "./UserOnboardingStateFindManyArgs";
import { UserOnboardingStateFindUniqueArgs } from "./UserOnboardingStateFindUniqueArgs";
import { UserOnboardingState } from "./UserOnboardingState";
import { UserDetailFindManyArgs } from "../../userDetail/base/UserDetailFindManyArgs";
import { UserDetail } from "../../userDetail/base/UserDetail";
import { UserOnboardingStateService } from "../userOnboardingState.service";
@graphql.Resolver(() => UserOnboardingState)
export class UserOnboardingStateResolverBase {
  constructor(protected readonly service: UserOnboardingStateService) {}

  async _userOnboardingStatesMeta(
    @graphql.Args() args: UserOnboardingStateFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [UserOnboardingState])
  async userOnboardingStates(
    @graphql.Args() args: UserOnboardingStateFindManyArgs
  ): Promise<UserOnboardingState[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => UserOnboardingState, { nullable: true })
  async userOnboardingState(
    @graphql.Args() args: UserOnboardingStateFindUniqueArgs
  ): Promise<UserOnboardingState | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserOnboardingState)
  async createUserOnboardingState(
    @graphql.Args() args: CreateUserOnboardingStateArgs
  ): Promise<UserOnboardingState> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserOnboardingState)
  async updateUserOnboardingState(
    @graphql.Args() args: UpdateUserOnboardingStateArgs
  ): Promise<UserOnboardingState | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserOnboardingState)
  async deleteUserOnboardingState(
    @graphql.Args() args: DeleteUserOnboardingStateArgs
  ): Promise<UserOnboardingState | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [UserDetail])
  async userDetails(
    @graphql.Parent() parent: UserOnboardingState,
    @graphql.Args() args: UserDetailFindManyArgs
  ): Promise<UserDetail[]> {
    const results = await this.service.findUserDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
